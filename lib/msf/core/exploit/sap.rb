# -*- coding: binary -*-

###
#
# Common SAP methods
#
###

require 'rubygems'
begin
  require 'nwrfc'
rescue LoadError
  abort("[x] This module requires the NW RFC SDK ruby wrapper (http://rubygems.org/gems/nwrfc) from Martin Ceronio.")
end


module Msf
module Exploit::SAP

  include NWRFC

  def initialize(info = {})
    super
    register_options(
      [
        OptString.new('CLIENT', [true, 'Client can be single (066), comma seperated list (000,001,066) or range (000-999)', '000,001,066']),
        OptString.new('SRHOST', [false, 'SAP Router Address', nil]),
        OptPort.new('SRPORT', [false, 'SAP Router Port Number', nil]),
    ], self.class)

  end

  def system_number(rport=nil)
    if rport
      rport.to_s[-2..-1]
    else
      datastore['RPORT'].to_s[-2..-1]
    end
  end

  def client_list
    if datastore['CLIENT'].nil?
      print_status("Using default SAP client list")
      clients = ['000', '001', '066']
    else
      if datastore['CLIENT'] =~ /^\d{3},/
        clients = datastore['CLIENT'].split(/,/)
        print_status("Brute forcing clients #{datastore['CLIENT']}")
      elsif
        datastore['CLIENT'] =~ /^\d{3}-\d{3}\z/
        array = datastore['CLIENT'].split(/-/)
        clients = (array.at(0)..array.at(1)).to_a
        print_status("Brute forcing clients #{datastore['CLIENT']}")
      elsif
        datastore['CLIENT'] =~ /^\d{3}\z/
        clients = datastore['CLIENT']
        print_status("Brute forcing client #{datastore['CLIENT']}")
      else
        print_status("Invalid CLIENT - using default SAP client list instead")
        clients = ['000', '001', '066']
      end
    end

    clients
  end

  def auth_hash(rhost, rport, client, username, password)
    ashost = rhost
    sysnr = system_number(rport)

    if datastore['SRHOST']
      ashost = "/H/#{datastore['SRHOST']}/H/#{rhost}"
    end

    {"user" => username, "passwd" => password, "client" => client, "ashost" => ashost, "sysnr" => sysnr}
  end

  def login(rhost, rport, client, username, password)
    conn = nil

    begin
      ah = auth_hash(rhost, rport, client, username, password)
      conn = Connection.new(ah)
    rescue NWError => e
      vprint_status("#{rhost}:#{rport} [SAP] login failed - Code #{e.code} Group #{e.group} Type #{e.type} Num #{e.number}: #{e.message}")
      raise e
    end

    conn
  end

  def run_function(conn, function_name, opts)
    fc = nil

    function = conn.get_function(function_name)
    fc = function.get_function_call

    opts.each do |key,value|
      fc[key] = value
    end

    fc.invoke

    fc
  end

  def sxpg_command_execute(conn, opts)
    function = conn.get_function("SXPG_COMMAND_EXECUTE")
    fc = function.get_function_call

    fc[:COMMANDNAME] = opts[:COMMANDNAME]
    fc[:ADDITIONAL_PARAMETERS] = opts[:ADDITIONAL_PARAMETERS]
    fc[:OPERATINGSYSTEM] = opts[:OPERATINGSYSTEM]

    fc.invoke
    data = ''
    data_length = fc[:EXEC_PROTOCOL].size

    0.upto(data_length) do |i|
      data << fc[:EXEC_PROTOCOL][i][:MESSAGE]
    end

    data
  end
end
end

